function computeBC (Graph g , int n,int source,propEdge<int> residual_capacity, propEdge<int> rev_residual_capacity,propNode<int> height,propEdge<int>reverse_edge) {

g.attachNodeProperty(height=n);
source.height = 0;

 iterateInBFS (v in g.nodes() from source ) {
    int curheight = v.height+1;
 for (w in g.neighbors(v).filter(rev_residual_capacity>0) ) {
    w.height = curheight;
 } 
 for( w in g.nodes_to(v).filter(residual_capacity>0)){
    w.height = curheight;
 }
 }

iterateInReverse( v != src ) {
 for(w in g.neighbors(v) ) {
 }
 }
}