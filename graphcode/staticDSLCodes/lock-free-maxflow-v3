function do_max_flow (Graph g, int source, int sink) {

    propNode<int> height;
    g.attachNodeProperty (height = 0) ;
    source.height = g.num_nodes();
    
    propNode<int> excess;
    g.attachNodeProperty (excess = 0) ;
	
	propEdge<int> residual_capacity;
	propEdge<int> reverse_edge;
	forall(v in g.nodes()){
		for(dst in g.neighbors(v)){
			edge e1 = g.get_edge(v,dst);
			e1.residual_capacity = e1.weight;
			for(vv in g.neighbors(dst)){
				if(vv == v){
					edge rev = g.get_edge(dst,vv);
					e1.reverse_edge = rev;
				}
			}
		}
	}
	
	forall (v in g.nodes().filter(v==source)) {
		for(vv in g.neighbors(v)){
			edge forward_edge = g.get_edge(v, vv) ;
			int d = forward_edge.residual_capacity;
			int backward_edge = forward_edge.reverse_edge;
			vv.excess += d;
			v.excess-=d;
			forward_edge.residual_capacity -= d;
			backward_edge.residual_capacity += d;
		}
    }
    
	bool flag=true;

	do{
		flag = false;
        forall (v in g.nodes().filter(v.excess>0 && v!=source && v!=sink )) {
			flag = true;
			int hh = INT_MAX;
			int v_0 = -1;
			int forward_edge = -1;
			int backward_edge = -1;
			for(vv in g.neighbors(v)) {
				edge e = g.get_edge(v,vv);
				int xxx=e.residual_capacity;
				if(vv.height<hh && xxx >0){
					v_0=vv;
					hh=vv.height;
					forward_edge = e;
				}
			}

			if(v.height>hh && v_0!=-1){
        	    int backward_edge = forward_edge.reverse_edge ;
				int fec = forward_edge.residual_capacity;
				int d=fec;
				if(v.excess<fec){
					d=v.excess;
				}
				v.excess -= d ;
        	    v_0.excess += d ;
				forward_edge.residual_capacity -= d ;
        	    backward_edge.residual_capacity += d ;
			}
			else if(v_0!=-1){
				v.height = hh + 1;
			}
        }
    }while(flag);    
}


function recalculate_max_flow (Graph g, int source, int sink) {

    propNode<int> height;
    g.attachNodeProperty (height = 0) ;
    source.height = g.num_nodes();
    
    propNode<int> excess;
    g.attachNodeProperty (excess = 0) ;
	
	propEdge<int> residual_capacity;
	propEdge<int> reverse_edge;

	forall(v in g.nodes()){
		for(dst in g.neighbors(v)){
			edge e1 = g.get_edge(v,dst);
			e1.residual_capacity = e1.weight;
			for(vv in g.neighbors(dst)){
				if(vv == v){
					edge rev = g.get_edge(dst,vv);
					e1.reverse_edge = rev;
				}
			}
		}
	}
	
	forall (v in g.nodes().filter(v==source)) {
		for(vv in g.neighbors(v)){
			edge forward_edge = g.get_edge(v, vv) ;
			int d = forward_edge.residual_capacity;
			int backward_edge = forward_edge.reverse_edge;
			vv.excess += d;
			v.excess-=d;
			forward_edge.residual_capacity -= d;
			backward_edge.residual_capacity += d;
		}
    }
    
	bool flag=true;

	do{
		flag = false;
        forall (v in g.nodes().filter(v.excess>0 && v!=source && v!=sink )) {
			flag = true;
			int hh = INT_MAX;
			int v_0 = -1;
			int forward_edge = -1;
			int backward_edge = -1;
			for(vv in g.neighbors(v)) {
				edge e = g.get_edge(v,vv);
				int xxx=e.residual_capacity;
				if(vv.height<hh && xxx >0){
					v_0=vv;
					hh=vv.height;
					forward_edge = e;
				}
			}

			if(v.height>hh && v_0!=-1){
        	    int backward_edge = forward_edge.reverse_edge ;
				int fec = forward_edge.residual_capacity;
				int d=fec;
				if(v.excess<fec){
					d=v.excess;
				}
				v.excess -= d ;
        	    v_0.excess += d ;
				forward_edge.residual_capacity -= d ;
        	    backward_edge.residual_capacity += d ;
			}
			else if(v_0!=-1){
				v.height = hh + 1;
			}
        }
    }while(flag);    

	forall(v in g.nodes()){
      for(nbr in g.get_neighbors(v)){
        edge e = g.get_edge(v,nbr);
        if(e.weight>0){
          v.excess+=e.weight-e.residual_capacity;
        } else {
          v.excess-=e.residual_capacity;
        }
      }
    }

	propNode<int> height2;
  g.attachNodeProperty(height2 = 0);
  sink.height2 = g.num_nodes();

forall(v in g.nodes().filter(v==sink)){
	forall(vv in g.neighbors(v)){
		edge forward_edge = g.get_edge(v, vv) ;
		int backward_edge = forward_edge.reverse_edge;
		int d = backward_edge.residual_capacity;
		v.excess += d;
		vv.excess -=d;
		forward_edge.residual_capacity += d;
		backward_edge.residual_capacity -= d;
	}
}

    
	 flag=true;

	do{
		  flag = false;
      forall (v in g.nodes().filter(v.excess<0 && v!=source && v!=sink )) {
			  flag = true;
			  int hh = INT_MAX;
			  int v_0 = -1;
			int inward_edge = -1;
			int outward_edge = -1;
			  for(vv in g.neighbors(v)) {
			  	edge rev = g.get_edge(v,vv);
				edge e = rev.reverse_edge;
			  	int xxx=e.residual_capacity;
			  	if(vv.height2<hh && xxx >0){
			  		v_0=vv;
			  		hh=vv.height2;
					inward_edge = e;
					outward_edge = rev;
			  	}
			  }

			  if(v.height2>hh && v_0!=-1){
			  	int d = inward_edge.residual_capacity;
				int yy = (v.excess)*(-1);
			  	if(yy<d){
			  		d=yy;
			  	}
			  	v.excess += d ;
          v_0.excess -= d ;
			  	inward_edge.residual_capacity -= d ;
          outward_edge.residual_capacity += d ;
			  }
			  else if(v_0!=-1){
			  	v.height2 = hh + 1;
			  }
          
      }
    }while(flag); 

	    g.attachNodeProperty (height = 0) ;
    source.height = g.num_nodes();
	flag=true;

	do{
		flag = false;
        forall (v in g.nodes().filter(v.excess>0 && v!=source && v!=sink )) {
			flag = true;
			int hh = INT_MAX;
			int v_0 = -1;
			int forward_edge = -1;
			int backward_edge = -1;
			for(vv in g.neighbors(v)) {
				edge e = g.get_edge(v,vv);
				int xxx=e.residual_capacity;
				if(vv.height<hh && xxx >0){
					v_0=vv;
					hh=vv.height;
					forward_edge = e;
				}
			}

			if(v.height>hh && v_0!=-1){
        	    int backward_edge = forward_edge.reverse_edge ;
				int fec = forward_edge.residual_capacity;
				int d=fec;
				if(v.excess<fec){
					d=v.excess;
				}
				v.excess -= d ;
        	    v_0.excess += d ;
				forward_edge.residual_capacity -= d ;
        	    backward_edge.residual_capacity += d ;
			}
			else if(v_0!=-1){
				v.height = hh + 1;
			}
        }
    }while(flag);    

	

}
