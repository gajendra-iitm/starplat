function computeBC (Graph g , int n,int source,propEdge<int> residual_capacity, propEdge<int> rev_residual_capacity,propNode<int> height,propEdge<int>reverse_edge) {

g.attachNodeProperty(height=n);
source.height = 0;
   propNode<bool> scanned;
   g.attachNodeProperty(scanned=false);
   source.scanned = true;
   forall( v in g.nodes().filter(scanned == true)){
      
   }
 iterateInBFS (v1 in g.nodes() from source ){
      for(w in g.neighbors(v1)){
         
            int e = g.get_edge(v1,w);
            if(e.rev_residual_capacity>0){            
               w.scanned = true;
            }
      }
      for(w in g.nodes_to(v1)){
         int rev = g.get_edge(w,v1);
         int e = rev.reverse_edge;
         if(e!=-1){
            if(e.residual_capacity>0){
            }
         }
      }
   


 }

}