function xComparator(Point a, Point b)
{
    if (a.x != b.x)
    {
        return a.x < b.x;
    }
    else
    {
        return a.y < b.y;
    }
}

function crossProduct(Point p1, Point p2, Point p3)
{
    return (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x);
}

function findTangents(container<Point> points, int gid1, int gid2, int group_size, container<int> stackArr, container<int> stackSize, container<int> tangents)
{
    int start1 = gid1 * group_size;
    int start2 = gid2 * group_size;
    int hull1_size = stackSize[gid1];
    int hull2_size = stackSize[gid2];
    int a = 0;
    int temp1 = 1;
    while (temp1 < hull1_size)
    {
        int curr = stackArr[start1 + temp1];
        int rightmost = stackArr[start1 + a];
        Point curPoint = points[curr];
        Point rightmostPoint = points[rightmost];
        if (curPoint.x > rightmostPoint.x || (curPoint.x == rightmostPoint.x && curPoint.y > rightmostPoint.y))
        {
            a = temp1;
        }
        temp1++;
    }
    int b = 0;
    temp1 = 1;
    while (temp1 < hull2_size)
    {
        int curr = stackArr[start2 + temp1];
        int leftmost = stackArr[start2 + b];
        Point curPoint = points[curr];
        Point leftmostPoint = points[leftmost];
        if (curPoint.x < leftmostPoint.x || (curPoint.x == leftmostPoint.x && curPoint.y < leftmostPoint.y))
        {
            b = temp1;
        }
        temp1++;
    }
    int upper_a = a;
    int upper_b = b;
    bool done = false;
    while (done == 0)
    {
        done = true;
        int next_a = (upper_a + 1) % hull1_size;
        int next_b = (upper_b - 1 + hull2_size) % hull2_size;
        int curr_point_a = stackArr[start1 + upper_a];
        int next_point_a = stackArr[start1 + next_a];
        int curr_point_b = stackArr[start2 + upper_b];
        int next_point_b = stackArr[start2 + next_b];
        if (crossProduct(points[curr_point_b], points[curr_point_a], points[next_point_a]) < 0)
        {
            upper_a = next_a;
            curr_point_a = stackArr[start1 + upper_a];
            done = false;
        }
        else if (crossProduct(points[curr_point_b], points[curr_point_a], points[next_point_a]) == 0)
        {
            Point curPointA = points[curr_point_a];
            Point curPointB = points[curr_point_b];
            Point nextPointA = points[next_point_a];

            double oldDistance = (curPointA.x - curPointB.x) * (curPointA.x - curPointB.x) + (curPointA.y - curPointB.y) * (curPointA.y - curPointB.y);
            double newDistance = (nextPointA.x - curPointB.x) * (nextPointA.x - curPointB.x) + (nextPointA.y - curPointB.y) * (nextPointA.y - curPointB.y);
            if (newDistance > oldDistance)
            {
                upper_a = next_a;
                curr_point_a = stackArr[start1 + upper_a];
                done = false;
            }
        }

        if (crossProduct(points[curr_point_a], points[curr_point_b], points[next_point_b]) > 0)
        {
            upper_b = next_b;
            done = false;
        }
        else if (crossProduct(points[curr_point_a], points[curr_point_b], points[next_point_b]) == 0)
        {
            Point curPointB = points[curr_point_b];
            Point curPointA = points[curr_point_a];
            Point nextPointB = points[next_point_b];
            double oldDistance = (curPointB.x - curPointA.x) * (curPointB.x - curPointA.x) + (curPointB.y - curPointA.y) * (curPointB.y - curPointA.y);
            double newDistance = (nextPointB.x - curPointA.x) * (nextPointB.x - curPointA.x) + (nextPointB.y - curPointA.y) * (nextPointB.y - curPointA.y);
            if (newDistance > oldDistance)
            {
                upper_b = next_b;
                done = false;
            }
        }
    }
    int lower_a = a;
    int lower_b = b;
    done = false;
    while (done == 0)
    {
        done = true;
        int next_a = (lower_a - 1 + hull1_size) % hull1_size;
        int next_b = (lower_b + 1) % hull2_size;
        int curr_point_a = stackArr[start1 + lower_a];
        int next_point_a = stackArr[start1 + next_a];
        int curr_point_b = stackArr[start2 + lower_b];
        int next_point_b = stackArr[start2 + next_b];
        if (crossProduct(points[curr_point_b], points[curr_point_a], points[next_point_a]) > 0)
        {
            lower_a = next_a;
            curr_point_a = stackArr[start1 + lower_a];
            done = false;
        }
        else if (crossProduct(points[curr_point_b], points[curr_point_a], points[next_point_a]) == 0)
        {
            Point curPointA = points[curr_point_a];
            Point curPointB = points[curr_point_b];
            Point nextPointA = points[next_point_a];

            double oldDistance = (curPointA.x - curPointB.x) * (curPointA.x - curPointB.x) + (curPointA.y - curPointB.y) * (curPointA.y - curPointB.y);
            double newDistance = (nextPointA.x - curPointB.x) * (nextPointA.x - curPointB.x) + (nextPointA.y - curPointB.y) * (nextPointA.y - curPointB.y);
            if (newDistance > oldDistance)
            {
                lower_a = next_a;
                curr_point_a = stackArr[start1 + lower_a];
                done = false;
            }
        }

        if (crossProduct(points[curr_point_a], points[curr_point_b], points[next_point_b]) < 0)
        {
            lower_b = next_b;
            done = false;
        }
        else if (crossProduct(points[curr_point_a], points[curr_point_b], points[next_point_b]) == 0)
        {
            Point curPointA = points[curr_point_a];
            Point curPointB = points[curr_point_b];
            Point nextPointB = points[next_point_b];
            double oldDistance = (curPointA.x - curPointB.x) * (curPointA.x - curPointB.x) + (curPointA.y - curPointB.y) * (curPointA.y - curPointB.y);
            double newDistance = (nextPointB.x - curPointA.x) * (nextPointB.x - curPointA.x) + (nextPointB.y - curPointA.y) * (nextPointB.y - curPointA.y);
            if (newDistance > oldDistance)
            {
                lower_b = next_b;
                done = false;
            }
        }
    }
    tangents[0] = upper_a;
    tangents[1] = upper_b;
    tangents[2] = lower_a;
    tangents[3] = lower_b;
}

function mergeTwoHulls(container<Point> points, int gid1, int gid2, int group_size, container<int> stackArr, container<int> stackSize)
{
    container<int>(4) tangents;
    findTangents(points, gid1, gid2, group_size, stackArr, stackSize, tangents);
    int start1 = gid1 * group_size;
    int start2 = gid2 * group_size;
    int hull1_size = stackSize[gid1];
    int hull2_size = stackSize[gid2];
    int upper_a = tangents[0];
    int upper_b = tangents[1];
    int lower_a = tangents[2];
    int lower_b = tangents[3];
    container<int> mergedHull;
    int curIdx = upper_a;
    while (curIdx != lower_a)
    {
        mergedHull.push_back(stackArr[start1 + curIdx]);
        curIdx = (curIdx + 1) % hull1_size;
    }
    mergedHull.push_back(stackArr[start1 + lower_a]);
    curIdx = lower_b;
    while (curIdx != upper_b)
    {
        mergedHull.push_back(stackArr[start2 + curIdx]);
        curIdx = (curIdx + 1) % hull2_size;
    }
    mergedHull.push_back(stackArr[start2 + upper_b]);
    curIdx = 0;
    while (curIdx < mergedHull.size())
    {
        stackArr[start1 + curIdx] = mergedHull[curIdx];
        curIdx = curIdx + 1;
    }
    stackSize[gid1] = mergedHull.size();
    stackSize[gid2] = 0;
}

function grahamScanConvexHull(int n, container<Point> points, int k)
{
    int group_size = (n + k - 1) / k;
    sort(points.begin(), points.end(), xComparator);
    container<int>(k) L;
    container<int>(n, 0) stackArr;
    container<int>(k, 0) stackSize;
    forall(v in L)
    {
        L[v] = v;
    }
    forall(gid in L)
    {
        int start = gid * group_size;
        int end;
        end = Min((gid + 1) * group_size, n);
        if (start >= n)
        {
            stackSize[gid] = 0;
        }
        else
        {
            int pivotIdx = start;
            Point startPoint = points[start];
            double lowestY = startPoint.y;
            int temp = start + 1;
            while (temp < end)
            {
                Point currentPivot = points[pivotIdx];
                Point tempPoint = points[temp];
                if (tempPoint.y < lowestY ||
                    (tempPoint.y == lowestY && tempPoint.x < currentPivot.x))
                {
                    pivotIdx = temp;
                    lowestY = tempPoint.y;
                }
                temp++;
            }
            Point pivot = points[pivotIdx];
            temp = start;
            while (temp < end)
            {
                int temp2 = temp + 1;
                while (temp2 < end)
                {
                    Point tempPoint = points[temp];
                    Point temp2Point = points[temp2];
                    double dx1 = tempPoint.x - pivot.x;
                    double dy1 = tempPoint.y - pivot.y;
                    double dx2 = temp2Point.x - pivot.x;
                    double dy2 = temp2Point.y - pivot.y;
                    double cross = dx1 * dy2 - dy1 * dx2;
                    if (cross == 0)
                    {
                        double dist1 = dx1 * dx1 + dy1 * dy1;
                        double dist2 = dx2 * dx2 + dy2 * dy2;

                        if (dist2 < dist1)
                        {
                            Point temp_swap = points[temp];
                            points[temp] = points[temp2];
                            points[temp2] = temp_swap;
                        }
                    }
                    else if (cross < 0)
                    {
                        Point temp_swap = points[temp];
                        points[temp] = points[temp2];
                        points[temp2] = temp_swap;
                    }
                    temp2++;
                }
                temp++;
            }
            if (end - start < 3)
            {
                int temp = start;
                while (temp < end)
                {
                    stackArr[temp] = temp;
                    temp++;
                }
                stackSize[gid] = end - start;
            }
            else
            {
                int stackIndex = gid * group_size;
                stackArr[stackIndex] = start;
                stackArr[stackIndex + 1] = start + 1;
                stackSize[gid] = 2;
                temp = start + 2;
                while (temp < end)
                {
                    bool shouldContinuePopping = true;
                    while (stackSize[gid] >= 2 && shouldContinuePopping)
                    {
                        int topIdx = stackIndex + stackSize[gid] - 1;
                        int top = stackArr[topIdx];
                        int nextTopIdx = stackIndex + stackSize[gid] - 2;
                        int nextTop = stackArr[nextTopIdx];
                        Point topPoint = points[top];
                        Point nextTopPoint = points[nextTop];
                        Point tempPoint = points[temp];
                        double cross = (nextTopPoint.x - topPoint.x) * (tempPoint.y - topPoint.y) -
                                       (nextTopPoint.y - topPoint.y) * (tempPoint.x - topPoint.x);
                        if (cross < 0)
                        {
                            shouldContinuePopping = false;
                        }
                        else
                        {
                            stackSize[gid] = stackSize[gid] - 1;
                        }
                    }
                    stackArr[stackIndex + stackSize[gid]] = temp;
                    stackSize[gid] = stackSize[gid] + 1;
                    temp++;
                }
            }
        }
    }
    int curIdx = 1;
    while (curIdx < k)
    {
        if (stackSize[curIdx] != 0)
        {
            mergeTwoHulls(points, 0, curIdx, group_size, stackArr, stackSize);
        }
        curIdx = curIdx + 1;
    }
    container<Point> finalHull;
    int elemNum = 0;
    while (elemNum < stackSize[0])
    {
        finalHull.push_back(points[stackArr[elemNum]]);
        elemNum = elemNum + 1;
    }
    return finalHull;
}