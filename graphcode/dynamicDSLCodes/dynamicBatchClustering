Static staticClusteringCoeff(Graph g, propNode<int> cf){
    g.attachNodeProperty(cf = 0);
    forall(v in g.nodes()) {
        forall(u in g.neighbors(v).filter(u < v)) {
            forall(w in g.neighbors(v).filter(w > v)) {
                if (g.is_an_edge(u, w)) {
                    v.cf+=1;
                    u.cf+=1;
                    w.cf+=1;
                }
            }
        }
    }
}

Decremental(Graph g, propNode<int> cf, updates<g> deleteBatch){
    forall(update in deleteBatch){
        int v1 = update.source;
        int v2 = update.destination;
        forall(v3 in g.neighbors(v1)){
            if(g.is_an_edge(v2,v3)){
                v1.cf -= 1;
                v2.cf -= 1;
                v3.cf -= 1;
            }
        }
    }
}

Incremental(Graph g, propNode<int> cf, updates<g> addBatch){
    forall(update in addBatch){
        int v1 = update.source;
        int v2 = update.destination;
        forall(v3 in g.neighbors(v1)){
            if(g.is_an_edge(v2,v3)){
                v1.cf += 1;
                v2.cf += 1;
                v3.cf += 1;
            }
        }
    }
}

Dynamic DynCF(Graph g, updates<g> updateBatch, propNode<int> cf, int batchSize){
    staticClusteringCoeff(g,cf);
    Batch(updateBatch:batchSize){
        updates<g> deleteBatch = updateBatch.currentBatch(0);
        updates<g> addBatch = updateBatch.currentBatch(1);
        Decremental(g, cf, deleteBatch);
        g.updateCSRDel(updateBatch);
        g.updateCSRAdd(updateBatch); 
        Incremental(g, cf, addBatch);
    }
}