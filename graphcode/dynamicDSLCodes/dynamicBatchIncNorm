function oneLevelAddProcessing(Graph g, propNode<float> BC, nodeMap(propNode<int>) bfsDistMem, nodeMap(propNode<double>) sigmaMem,
nodeMap(propNode<float>) deltaMem, propNode<int> bfsDistNew, propNode<double> sigmaNew, propNode<float> deltaNew,
int src, propNode<int> direction, nodeMap(propEdge<bool>) modified, nodeMap(propNode<int>) parentMem,
propNode<bool> isChanged) {

propNode<bool> tempChange;
g.attachNodeProperty(tempChange = isChanged);

bool finished =False;

 fixedPoint until (finished:!tempChange)
 {
   forall (v in g.nodes().filter(tempChange == True))
    {
     forall (nbr in g.neighbors(v))
                        {          
                        edge e = g.get_edge(v, nbr);
                      
                        }
    }
  } 

for(v in g.nodes()) {

 if(v.bfsDistMem[src] > v.bfsDistNew)
    v.isChanged = True;

}

container<int> levelNodesLater;
container<int>(g.num_nodes(), 0) levelCount;
container<container<int>>(g.num_nodes()) levelQueues;

 int phase = 0;


for(v in g.nodes(). filter(isChanged == true)){

      if(v.bfsDistNew != INT_MAX/2){
        levelQueues[v.bfsDistNew].push(v); 
        levelCount[v.bfsDistNew] = levelCount[v.bfsDistNew] + 1;
        v.direction = 1;
      }
    else {

       v.sigmaNew = 0;

       for(nbr in g.nodes_to(v)){
          if(nbr.bfsDistMem[src] + 1 == v.bfsDistMem[src]) {
             if(nbr.bfsDistNew  != INT_MAX/2 && nbr.direction == 0){
                levelQueues[nbr.bfsDistNew].push(nbr);
                levelCount[nbr.bfsDistNew] = levelCount[nbr.bfsDistNew] + 1;
                nbr.sigmaNew = 0;
                nbr.direction = 2;
             }

          }
       }
    }  
  } 

  while(phase < g.nodes()){
   
     if(levelQueues[phase]){
      
       for(v in levelQueues[phase]){
         v.direction = 1;
         v.sigmaNew = 0;

        for(w in g.inOutNbrs(v)){
            
           edge e = g.get_edge(v, w) ;

           if(((w.bfsDistNew == v.bfsDistNew + 1)  || (w.bfsDistMem[src] == v.bfsDistMem[src] + 1)) && w.direction == 0 && e.dir == 1){
              
                if(w.direction == 0){
                 w.direction = 1;
                 levelQueues[w.bfsDistNew].push(w);
                 levelCount[w.bfsDistNew] = levelCount[w.bfsDistNew] + 1;
                 w.sigmaNew = 0;
              }
              
           }
          if((w.bfsDistNew == v.bfsDistNew) && (w.bfsDistMem[src] != v.bfsDistMem[src])){
             
              if(w.direction == 0)
              {
                w.direction = 1;
                levelQueues[w.bfsDistNew].push(w);
                levelCount[w.bfsDistNew] = levelCount[w.bfsDistNew] + 1;
                w.sigmaNew = 0;
              }      
           } 
        }
      }
     }
     phase = phase + 1;  

  }

phase = 0;


 while(phase < g.nodes()){

   if(levelQueues[phase]){

     for(v in levelQueues[phase]){
           
           v.direction = 1;
           if(v == src)
              v.sigmaNew = 1;
           
           for(w in g.nodes_to(v)){

            edge e = g.get_edge(v, w);
            if(w.bfsDistNew + 1 == v.bfsDistNew){      
                v.sigmaNew = w.sigmaNew + 1;
               }
           }
     }

   }
    phase = phase + 1;

  } 

  phase = g.num_nodes() - 1;
  container<container<int>>(g.num_nodes()) levelNodesBack; 
  
  while(phase >= 0){
    
    if(levelQueues[phase]){

       forall(w in levelQueues[phase]){
            w.deltaNew = w.deltaMem[src];
      
            for(v in g.neighbors(w)){
               
               edge e = g.get_edge(w, v);
               if((v.bfsDistNew > w.bfsDistNew) || (v.bfsDistMem[src] == w.bfsDistMem[src] + 1)){
                     
                     if(v.sigmaNew > 0 && v.bfsDistNew == w.bfsDistNew + 1){
                        
                        if(v.direction == 0){
                          
                          v.deltaNew = v.deltaMem[src];

                        }
                      w.deltaNew = w.deltaNew + w.sigmaNew * (1 + v.deltaNew) / v.sigmaNew;
                     }
               
                 float alpha = 0;
               
               if(!e.modified[src]) {
                 if(v.sigmaMem[src] > 0 && (v.bfsDistMem[src] == w.bfsDistMem[src] + 1)){
                   
                   alpha = w.sigmaMem[src] * (1 + v.deltaMem[src]) / v.sigmaMem[src];

                 }
               } 

                 w.deltaNew = w.deltaNew - alpha;
               }
            }   
          
        for(v in g.nodes_to(w)){
            
            if(v.bfsDistNew < w.bfsDistNew){
               
               if(v.direction == 0){

                  v.direction = 2;
                  v.deltaNew = v.deltaMem[src];
                  levelNodesBack[v.bfsDistNew].push(v);

               }
            }
        }

       }


     for(j in g.nodes(). filter(j < phase)){

         if(levelNodesBack[j]){

            levelQueues[j].insert(levelNodesBack[j]);
            levelCount[j] = levelCount[j] + levelNodesBack[j].size();
            levelNodesBack[j].clear();
         }
  
      }
    }

    phase = phase - 1;

  } 
}

Incremental(Graph g, propNode<float> BC, SetN<g> seeds, nodeMap(propNode<int>) bfsDistMem, nodeMap(propNode<float>) deltaMem,
nodeMap(propNode<double>) sigmaMem, updates<g> addBatch, nodeMap(propEdge<bool>) modified, nodeMap(propNode<node>) parentMem, nodeMap(propNode<bool>) modifiedMem)
{

for(seed in seeds) {

propNode<double> sigmaNew;
propNode<int> bfsDistNew;
propNode<float> deltaNew;
propNode<int> direction;
node src = seed;

g.attachNodeProperty(bfsDistNew = bfsDistMem[src], sigmaNew = sigmaMem[src], deltaNew = 0, direction = 0);

propNode<bool> modifiedNodes = modifiedMem[src];
oneLevelAddProcessing(g, BC, bfsDistMem, sigmaMem, deltaMem, bfsDistNew, sigmaNew, deltaNew, src, direction, modified,
                     parentMem, modifiedNodes);

 forall(v in g.nodes()) {
  
  v.bfsDistMem[src] = v.bfsDistNew;
  v.sigmaMem[src] = v.sigmaNew;

  if(v.direction != 0)
     v.deltaMem[src] = v.deltaNew; 

  }
 }
}

Dynamic DynBC(Graph g, propNode<float> BC, SetN<g> seeds, updates<g> updateBatch, int batchSize)
{
  nodeMap(propNode<int>) bfsDistMem;
  nodeMap(propNode<float>) deltaMem;
  nodeMap(propNode<double>) sigmaMem;
  nodeMap(propNode<node>) parentMem;
  nodeMap(propNode<bool>) modifiedMem;
  nodeMap(propNode<bool>) bfsModMem;
  nodeMap(propEdge<bool>) modified;
  updates<g> addBatch;

 Batch(updateBatch:batchSize)
    {
      addBatch = updateBatch.currentBatch(1);

      g.updateCSRAdd(updateBatch); 

        for(seed in seeds)
        {
           propEdge<bool> srcEdgeFilter;
           g.attachEdgeProperty(srcEdgeFilter = true);
           modified[seed] = srcEdgeFilter;
        }

     OnAdd(u in updateBatch.currentBatch()):
      {
         int src = u.source;
         int dest = u.destination;

         for(seed in seeds)
           {
             propNode<int> bfsVal = bfsDistMem[seed];
             if(dest.bfsVal > src.bfsVal + 1)
               {
                 dest.modifiedMem[seed] = True;
                 src.modifiedMem[seed] = True;
               }
              else
                src.modifiedMem[seed] = True; 
           }

           for(nbr in g.neighbors(src))
             {
                edge e = g.get_edge(src, nbr);
                if(nbr == dest)
                  {
                    for(seed in seeds)
                       {
                          e.modified[seed] = false;
                       }
                  }
             }
      }
 
    Incremental(g, BC, seeds, bfsDistMem, deltaMem, sigmaMem, addBatch, modified , parentMem , modifiedMem);

    } 

}

