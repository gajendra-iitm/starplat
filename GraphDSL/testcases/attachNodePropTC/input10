function Compute_BC ( Graph g )
{
  propNode <float> BC;
  g.attachNodeProperty (BC =0);
 
   forall (src in  g.nodes() ) {
                    
	          propNode <int> sigma;
             propNode<float> delta;
             g.attachNodeProperty(delta=0);
             g.attachNodeProperty(sigma = 0);
             src.sigma = 1;
         
 iterateInBFS(v:nodesof(g) from src)
{
  for(w in g.neighbours(v))
   { 
     w.sigma=w.sigma+v.sigma;
   }
 }


 iterateInReverse(v!=src)
     {
       for(w in g.neighbours(v).filter(w.d==v.d+1))
     	{
       	v.delta = v.delta + (v.sigma / w.sigma) * ( 1 + w.delta);
        }
     
	     v.BC = v.BC + v.delta;
	    
     }
  }
}